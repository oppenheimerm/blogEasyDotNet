@page "{id}"
@model BE.Web.Pages.Admin.EditPostModel
@{
	ViewData["Title"] = $"Edit Post: {Model.Post.Title}";
}

<section class="section">
	<div class="container">

		<div class="editor__actions flex">
			<button id="hide__btn-details" class="admin__btn" onclick="toggeleDetailsSectionUp('toggle_details');" type="button">
				Hide Details
			</button>
			<button id="show__btn-details" class="admin__btn" onclick="toggeleDetailsSectionDown('toggle_details');" type="button">
				Show Details
			</button>
		</div>


		@{
			if (Model.HasImages)
			{
				<a class="btn btn__small" asp-page="/admin/addphoto" asp-route-id="@Model.Post.Id">Add Photo</a>

				<div class="post__gallery-wrapper flex">
					<div class="post__gallery">
						<input type="hidden" id="baseFolderPath" name="baseFolderPath" value="@Model.FolderBasePath">
						@foreach (var item in Model.PostImages)
						{
							var imageUrl = Model.FolderBasePath + item.FileName;
							<figure class="post__gallery-item">
								<img class="post__gallery-image" src="@imageUrl" onclick="getImageMarkdownText(this);" id="@item.FileName" data-image-name="@item.FileName" />
							</figure>
						}
					</div>
				</div>
			}
			else
			{
				<div class="post__gallery-wrapper">
					<div class="no__image-wrap flex">
						<a asp-page="/admin/addphoto" asp-route-id="@Model.Post.Id">
							<span class="material-symbols-outlined img__uploand-link">
								cloud_upload
							</span>
						</a>
						<p class="post__gallery-instructions">To add photos for this post click the icon above.</p>
					</div>
				</div>
			}
		}






		<form id="form_edit-create" method="post" action="">
			<div asp-validation-summary="All" class="text-danger"></div>
			<textarea asp-for="Post.PostContentParsed" hidden="hidden"></textarea>
			<input type="hidden" asp-for="Post.Id" />
			<fieldset class="field__set">

				<div id="toggle_details" class="form__hideable-section">
					<legend class="form__legend">Edit Post: @Model.Post.Title</legend>
					<div class="form__margin">
						<input asp-for="Post.Title" class="form__input" placeholder="Post title" aria-label="Post title" />
						<span asp-validation-for="Post.Title" class="text-danger"></span>
					</div>
					<div class="form__margin">
						<textarea asp-for="Post.PostExcerpt" id="PostExcerpt" class="form__textarea" placeholder="Excerpt here" aria-label="Post excerpt"></textarea>
						<span asp-validation-for="Post.PostExcerpt" class="text-danger"></span>
					</div>
					<div class="form__margin">
						<input asp-for="Post.Tags" class="form__input" placeholder="Coma delimited tag" aria-label="Post tags" />
						<span asp-validation-for="Post.Tags" class="text-danger"></span>
					</div>
					@if (!string.IsNullOrEmpty(Model.Post.PostCover))
					{
						<div class="form__margin">
							<div class="flex frm__current-photo-wrap">
								<img src="@ViewHelpers.GetPostCoverImage(Model.Post.PostFolderName, Model.Post.PostCover)" class="frm__photo-preview" />
								<div class="photo__preview-actions">
									<a asp-page="/admin/EditCoverPhoto" asp-route-id="@Model.Post.Id" class="btn btn__default form__button">Edit Cover Photo</a>
								</div>
							</div>
						</div>
					}
					else
					{
						<div class="form__margin">
							<div class="flex frm__current-photo-wrap">
								<img src="~/img/assets/photo-icon-white.png" class="frm__photo-preview" />
								<div class="photo__preview-actions">
									<a href="#" class="btn btn__default form__button">Add Cover Photo</a>
								</div>
							</div>
						</div>
					}

					<div class="form__margin">
						<input asp-for="Post.IsPublished" class="chk__bx" type="checkbox" />Is Published?
					</div>
				</div>

				<div class="outer__content-wrap flex">
					<div class="content__wrap flex">
						<div class="form__margin eat__space">
							<textarea asp-for="Post.PostContent" id="PostContent" class="form__textarea" placeholder="Post content" aria-label="Post content"></textarea>
							<span asp-validation-for="Post.PostContent" class="text-danger"></span>
						</div>
					</div>
					<div class="preview__wrap">
					</div>
				</div>

				<div class="form__margin">
					<input type="submit" valuse="SUBMIT" class="btn btn__default form__button" />
				</div>

			</fieldset>

		</form>
	</div>
</section>




@section Scripts{
	<script type="text/javascript">

		let hide_btn_details = document.getElementById("hide__btn-details");
		let show_btn_details = document.getElementById("show__btn-details");

		function toggeleDetailsSectionUp(element) {
			var element = document.getElementById(element);
			element.style.transition = "all 2s ease-in-out";
			element.style.display = "none";
			element.style.height = "0";
			// disable this button
			/*hide_btn_details.disabled = true;
			show_btn_details.Disabled = false;*/
		}
		function toggeleDetailsSectionDown(element) {
			var element = document.getElementById(element);
			element.style.transition = "all 2s ease-in-out";
			element.style.height = "auto";
			element.style.display = "inline-flex";
			element.classList.add("form__hideable-section");
			// disable buttons
			/*hide_btn_details.disabled = false;
			show_btn_details.disabled = true;*/
		}

	</script>

	<script src="https://unpkg.com/marked@4.2.12"></script>

	<script>hljs.highlightAll();</script>


	<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
	<script type="text/javascript">
		var text = document.querySelector("#PostContent");
		var compiled = document.querySelector(".preview__wrap");
		var postContentParsed = document.querySelector("#Post_PostContentParsed");
		var debounce;

		MathJax = {
			tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] }
		};


		document.onreadystatechange = function (event) {

			if (document.readyState === "complete") {

				var render = function () {
					compiled.innerHTML = marked.parse(text.value/* deprecated, {sanitize: true} */);
					postContentParsed.innerHTML = marked.parse(text.value);
					hljs.highlightAll();
					MathJax.typeset();
				};

				/* On change event, process text into markdown and render */
				var changeHandler = function () {
					clearTimeout(debounce);
					debounce = setTimeout(render, 300);
				};

				/* Listen for changes to textarea */
				render();
				text.addEventListener('input', changeHandler);

			}
		};





	</script>

	<script type="text/javascript">

		// see if DOM is already available
		/*if(document.readyState === "complete"){

		}*/
		function getImageMarkdownText(imageFileName) {
			var baseFolderPath = document.getElementById("baseFolderPath").value;
			//var image = document.querySelector("#electric-cars");
			console.log("File name:" + imageFileName.src);
			console.log("Id:" + imageFileName.id);
			//	image markdown
			//	![Drag Racing](Dragster.jpg)
			var markdownImageText = "!" + "[alt text..]" + "(" + baseFolderPath + "/" + imageFileName.id + ")";
			console.log("Markdown: " + markdownImageText);
			console.log("Base folder path: " + baseFolderPath);
			navigator.clipboard.writeText(markdownImageText);

			// Alert the copied text
			alert("Photo link was copied: " + markdownImageText);
		}

	</script>

}


